import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

import 'package:cloud_firestore/cloud_firestore.dart';

import 'package:intl/intl.dart';
import 'package:number_to_words/number_to_words.dart';

import 'package:Auction_App/provider/bidServices.dart';
import 'package:Auction_App/provider/adminServices.dart';

class AuctionScreen extends StatefulWidget {
  static const routeName = '/auction';

  @override
  _AuctionScreenState createState() => _AuctionScreenState();
}

class _AuctionScreenState extends State<AuctionScreen> {
  @override
  Widget build(BuildContext context) {
    final routeArgs = ModalRoute.of(context).settings.arguments as Map;

    final playerId = routeArgs['id'];
    final collectionPath = routeArgs['collectionPath'];
    // print(routeArgs);
    final bidsServiceData = Provider.of<BidServices>(context, listen: false);
    final adminData = Provider.of<AdminServices>(context, listen: false);
    // print(adminData.isAdmin);

    return Scaffold(
      appBar: AppBar(
        title: adminData.isAdmin ? Text('Admin') : Text('Auction Screen '),
        actions: [
          if (adminData.isAdmin)
            DropdownButton(
              icon: Icon(
                Icons.more_vert,
                color: Theme.of(context).primaryIconTheme.color,
              ),
              items: [

                
                DropdownMenuItem(
                  child: Container(
                    child: Row(
                      children: [
                        Icon(Icons.pause_circle_outline),
                        SizedBox(width: 8),
                        Text('Stop Bidding'),
                      ],
                    ),
                  ),
                  value: 'Stop',
                ),
                DropdownMenuItem(
                  child: Container(
                    child: Row(
                      children: [
                        Icon(Icons.restore_page_outlined),
                        SizedBox(width: 8),
                        Text('Start Bidding'),
                      ],
                    ),
                  ),
                  value: 'Start',
                ),
              ],
              onChanged: (itemIdentifier) {
                if (itemIdentifier == 'Stop') {
                  adminData.controlBidding(playerId, collectionPath);
                  adminData.buttonControl();
                  print("Bidding Status : " + adminData.isBidding.toString());
                }
                if (itemIdentifier == 'Start') {
                  adminData.controlBidding(playerId, collectionPath);
                  adminData.buttonControl();
                  print("Bidding Status : " + adminData.isBidding.toString());
                }
              },
            )
        ],
      ),
      body: StreamBuilder(
          stream: FirebaseFirestore.instance
              .collection(collectionPath)
              .doc(playerId)
              .collection('bids')
              .orderBy('bidValue', descending: true)
              .snapshots(),
          builder: (ctx, snapShot) {
            if (snapShot.connectionState == ConnectionState.waiting) {
              return Center(
                child: CircularProgressIndicator(),
              );
            }
            final bidDocs = snapShot.data.docs;
            return ListView.builder(
              itemCount: bidDocs.length,
              itemBuilder: (ctx, index) => Column(
                children: [
                  // Text(playerDocSnap[index]['name']),
                  // Text(playerDocSnap[index]['basePrice']),

                  Padding(
                    padding: const EdgeInsets.all(10.0),
                    child: Card(
                      child: ListTile(
                        title: Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            Text(bidDocs[index]['bidValue'].toString()),
                            Text(NumberToWord()
                                .convert('en-in', bidDocs[index]['bidValue'])
                                .toString()
                                .toUpperCase()),
                          ],
                        ),
                        subtitle: Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            Text(bidDocs[index]['bidBy']),
                            Text(DateFormat.jms().format(
                                DateTime.fromMillisecondsSinceEpoch(
                                    bidDocs[index]['bidAt'].seconds * 1000))),
                            Text(DateFormat.MEd()
                                .format(DateTime.fromMillisecondsSinceEpoch(
                                    bidDocs[index]['bidAt'].seconds * 1000))
                                .toString()),
                          ],
                        ),
                      ),
                    ),
                  )
                ],
              ),
            );
          }),
      floatingActionButton: FloatingActionButton(
          child: Icon(Icons.add),
          onPressed: () async {
            // print(await bidsServiceData.getBiddingStatus(
            //     playerId, collectionPath));
            await bidsServiceData.getBiddingStatus(playerId, collectionPath)
                ? bidsServiceData.openBidSheet(
                    context, playerId, collectionPath)
                : showDialog(
                    context: context,
                    builder: (_) => AlertDialog(
                      title: Text("An Error Occured!"),
                      content: Text(
                          "Bidding has been Stopped By the Admin.\n For further query contact Admin"),
                      actions: [
                        FlatButton(
                          child: Text('Okay'),
                          onPressed: () {
                            Navigator.of(context).pop();
                          },
                        )
                      ],
                    ),
                  );
          }),
    );
  }
}
